name: Publish to NPM

on:
  push:
    branches: [ master ]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write  # Required for npm provenance
      actions: write   # Required to bypass branch protection
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for checkout
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run semantic-release
        id: semantic
        run: |
          echo "üöÄ Running semantic-release..."
          # Configure git for semantic-release
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Set remote URL with token for authenticated pushes
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/gift-calc/gift-calc.git
          
          # Run semantic-release
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Get release info
        if: always()  # Run even if semantic-release doesn't publish
        id: release_info
        run: |
          # Check if a new version was published by looking for the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ] && [ -n "$LATEST_TAG" ]; then
            echo "published=true" >> $GITHUB_OUTPUT
            NEW_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix if present
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "üéâ New version published: $NEW_VERSION"
            
            # Check if core files changed (for website sync)
            CORE_FILES_CHANGED=$(git diff HEAD~1 --name-only | grep -E '^(index\.js|src/)' || true)
            if [ -n "$CORE_FILES_CHANGED" ]; then
              echo "core-changed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Core files changed, will sync to website"
            else
              echo "core-changed=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No core files changed"
            fi
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "core-changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No new version published"
          fi
          
      - name: Build web bundle
        if: steps.release_info.outputs.core-changed == 'true'
        run: |
          echo "üåê Building web bundle..."
          if [ -f src/core-web.js ]; then
            cp src/core-web.js src/core-bundle.js
            echo "‚úÖ Web bundle created from src/core-web.js"
          else
            echo "‚ö†Ô∏è src/core-web.js not found, skipping web bundle creation"
          fi
          
      - name: Update Homebrew formula
        if: steps.release_info.outputs.published == 'true'
        run: |
          echo "üç∫ Updating Homebrew formula..."
          NEW_VERSION="${{ steps.release_info.outputs.version }}"
          echo "üîÑ Triggering Homebrew update for version $NEW_VERSION"
          
          RESPONSE=$(curl -w "%{http_code}" -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.HOMEBREW_DISPATCH_TOKEN }}" \
            https://api.github.com/repos/gift-calc/homebrew-gift-calc/dispatches \
            -d "{\"event_type\":\"version_update\",\"client_payload\":{\"version\":\"$NEW_VERSION\"}}")
          
          if [ "$RESPONSE" -eq "204" ]; then
            echo "‚úÖ Homebrew update triggered successfully"
          else
            echo "‚ö†Ô∏è Homebrew update request returned status: $RESPONSE"
          fi
          
      - name: Sync core to website
        if: steps.release_info.outputs.core-changed == 'true'
        run: |
          echo "üåç Syncing core logic to website..."
          
          # Clone the website repository
          echo "üì• Cloning website repository..."
          git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/gift-calc/gift-calc.github.io.git website-repo
          
          # Create js directory if it doesn't exist
          mkdir -p website-repo/js
          
          # Copy the web-compatible core if it exists
          if [ -f src/core-web.js ]; then
            cp src/core-web.js website-repo/js/core.js
            echo "üìã Copied core-web.js to website/js/core.js"
          else
            echo "‚ö†Ô∏è src/core-web.js not found, skipping website sync"
            exit 0
          fi
          
          # Configure git for website repo
          cd website-repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit and push if there are changes
          if [ -n "$(git status --porcelain js/core.js)" ]; then
            git add js/core.js
            git commit -m "chore: update core calculation logic from main repository"
            git push origin master
            echo "‚úÖ Website updated with new core logic"
          else
            echo "‚ÑπÔ∏è No changes in core logic, website already up to date"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}